# Control de capas
# Layers control
addLayersControl(
baseGroups = c("Topográfico", "Fotográfico"),
#overlayGroups = c("PCT", "Southern Terminus", "Northern Terminus", "States"),
options = layersControlOptions(collapsed = FALSE),
) %>%
# Añadir leyenda
addLegend(position = 'bottomright', pal=pal, values=~Tipo.de.valor, title="Tipo", opacity = 0.6)
# Print the map
m
url = "https://github.com/Robinlovelace/sdvwR/raw/master/data/gps-trace.gpx"
download.file(url, destfile = "shef2leeds.gpx", method = "wget")
library(rgdal)
shef2leeds <- readOGR("shef2leeds.gpx", layer = "tracks")
m2 %>%
setView(-1.5, 53.4, 9) %>% # map location
addPolylines(data = shef2leeds, color = "red", weight = 4)
m2 <- leaflet() %>% addTiles()
m2 %>%
setView(-1.5, 53.4, 9) %>% # map location
addPolylines(data = shef2leeds, color = "red", weight = 4)
m2 %>%
setView(-1.5, 53.4, 9) %>% # map location
addPolylines(data = shef2leeds, color = "red", weight = 4, popup = "Hola")
library(sp)
l1 <- cbind(c(1, 2, 3), c(3, 2, 2))
l2 <- cbind(c(1, 2, 3), c(1, 1.5, 1))
l1
i
Sl1 <- Line(l1)
Sl1
S1 <- Lines(list(Sl1), ID = "a")
S1
l1 <- cbind(c(1, 2, 3), c(3, 2, 2))
l2 <- cbind(c(1, 2, 3), c(1, 1.5, 1))
Sl1 <- Line(l1)
Sl2 <- Line(l2)
S1 <- Lines(list(Sl1), ID = "a")
S2 <- Lines(list(Sl2), ID = "b")
Sl <- SpatialLines(list(S1, S2))
Sl
library(rgeos)
df <- data.frame(len = sapply(1:length(Sl), function(i) gLength(Sl[i, ])))
rownames(df) <- sapply(1:length(Sl), function(i) Sl@lines[[i]]@ID)
View(df)
Sldf <- SpatialLinesDataFrame(Sl, data = df)
Sldf
plot(Sldf, col = c("red", "blue"))
text(labels = paste0("length = ", round(Sldf@data$len, 2)),
x = gCentroid(Sldf, byid = TRUE)$x,
y = gCentroid(Sldf, byid = TRUE)$y)
Sldf <- SpatialLinesDataFrame(Sl, data = df)
m2 <- leaflet() %>% addTiles()
m2 %>% addPolylines(data = Sldf)
library(rgdal)
shef2leeds <- readOGR("datos/ruta1.kml", layer = "tracks")
shef2leeds <- readOGR("datos/ruta1.kml", "ruta1")
ruta1 <- shape <- readOGR(dsn = ".", layer = "datos/ruta1")
ruta1 <- shape <- readOGR(dsn = ".", layer = "datos/ruta1.shp")
ruta1 <- readOGR(dsn = ".", layer = "datos/ruta1.shp")
ruta1 <- readOGR(dsn = ".", layer = "datos/ruta1")
ogrInfo("datos", "ruta1")
ogrInfo("datos", "ruta1")
ogrInfo("datos", "ruta1")
ruta1 <- readOGR(dsn = "datos", layer = "ruta1")
m2 <- leaflet() %>% addTiles()
m2 %>%
setView(-1.5, 53.4, 9) %>% # map location
addPolylines(data = ruta1, color = "red", weight = 4, popup = "Hola")
# Carga de los datos
library(RCurl)
library(yaml)
library(dplyr)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(rgdal)
baseurl <- "http://forosocialcriptana.github.io/catalogo/"
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data[["Tipo.de.valor"]] <- factor(data[["Tipo.de.valor"]])
# Obtención de rutas
ruta1 <- readOGR(dsn = "datos", layer = "ruta1")
# Función que obiene el nombre normalizado para una ficha de un lugar.
getName <- function (x) {
name <- gsub(" ", "-", tolower(iconv(x, to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
return(name)
}
# Transformación de las url de las fotos para tomarlas del catálogo en github
getUrlPhoto <- function (x) {
name <- ""
if (x[9]!="") {
name <- paste("https://forosocialcriptana.github.io/catalogo/img/small/", getName(x[2]), "-1.jpg", sep="")
}
return(name)
}
data[["Fotos"]] <- apply(data, 1, getUrlPhoto)
# Creación de una columna con los textos de los popups
data[["Popup"]] <- paste("<h3><a href=\"", baseurl, "lugares/", getName(data[["Título"]]), "/index.html\">", data[["Título"]], "</a></h3>\n\n<img src=\"", data[["Fotos"]], "\">\n\n<p>", data[["Descripción.breve"]], "</p>", sep="")
# Paleta de colores
#tmp <- factor(sample.int(4, nrow(data), TRUE))
pal <- colorFactor(c("#00FF00FF", "#FFFF00FF", "#FF0000FF", "#0000FFFF"), data[["Tipo.de.valor"]])
#colors <- colorFactor(terrain.colors(4), levels(data[["Tipo.de.valor"]]))
mapa <- leaflet(data=data) %>%
setView(lng = -3.0837, lat = 39.3343, zoom = 11) %>%
# Añadir capa de mapa base
addTiles("https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Topográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir capa de mapa ortofotográfico
addTiles("https://api.mapbox.com/styles/v1/forosocialcriptana/ciq96tnhl007zerm4k9idudqz/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Fotográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir marcadores de lugares
addCircleMarkers(lng=~Longitud, lat=~Latitud, popup=~Popup, color=~pal(Tipo.de.valor), opacity = 1, fillOpacity = 0.5, weight = 2, radius = 4, clusterOptions = markerClusterOptions(), group="Lugares") %>%
# Añadir rutas
addPolylines(data = ruta1, color = "purple", weight = 4, popup = "Ruta del Arroyo San Marcos", group="Rutas") %>%
# Control de capas
addLayersControl(
baseGroups = c("Topográfico", "Fotográfico"),
overlayGroups = c("Lugares", "Rutas"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# Añadir leyenda
addLegend(position = 'bottomright', pal=pal, values=~Tipo.de.valor, title="Tipo", opacity = 0.6)
# Imprimir el mapa
mapa
saveWidget(mapa, "mapa.html", selfcontained = FALSE)
# Carga de los datos
library(RCurl)
library(yaml)
library(dplyr)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(rgdal)
baseurl <- "http://forosocialcriptana.github.io/catalogo/"
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data[["Tipo.de.valor"]] <- factor(data[["Tipo.de.valor"]])
# Obtención de rutas
ruta1 <- readOGR(dsn = "datos", layer = "ruta1")
# Función que obiene el nombre normalizado para una ficha de un lugar.
getName <- function (x) {
name <- gsub(" ", "-", tolower(iconv(x, to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
return(name)
}
# Transformación de las url de las fotos para tomarlas del catálogo en github
getUrlPhoto <- function (x) {
name <- ""
if (x[9]!="") {
name <- paste("https://forosocialcriptana.github.io/catalogo/img/small/", getName(x[2]), "-1.jpg", sep="")
}
return(name)
}
data[["Fotos"]] <- apply(data, 1, getUrlPhoto)
# Creación de una columna con los textos de los popups
data[["Popup"]] <- paste("<h3><a href=\"", baseurl, "lugares/", getName(data[["Título"]]), "/index.html\">", data[["Título"]], "</a></h3>\n\n<img src=\"", data[["Fotos"]], "\">\n\n<p>", data[["Descripción.breve"]], "</p>", sep="")
# Paleta de colores
#tmp <- factor(sample.int(4, nrow(data), TRUE))
pal <- colorFactor(c("#00FF00FF", "#FFFF00FF", "#FF0000FF", "#0000FFFF"), data[["Tipo.de.valor"]])
#colors <- colorFactor(terrain.colors(4), levels(data[["Tipo.de.valor"]]))
mapa <- leaflet(data=data) %>%
setView(lng = -3.0837, lat = 39.3343, zoom = 11) %>%
# Añadir capa de mapa base
addTiles("https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Topográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir capa de mapa ortofotográfico
addTiles("https://api.mapbox.com/styles/v1/forosocialcriptana/ciq96tnhl007zerm4k9idudqz/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Fotográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir marcadores de lugares
addCircleMarkers(lng=~Longitud, lat=~Latitud, popup=~Popup, color=~pal(Tipo.de.valor), opacity = 1, fillOpacity = 0.5, weight = 2, radius = 4, clusterOptions = markerClusterOptions(), group="Lugares") %>%
# Añadir rutas
addPolylines(data = ruta1, color = "purple", weight = 4, popup = "Ruta del Arroyo San Marcos", group="Rutas") %>%
hideGroup("Rutas") %>%
# Control de capas
addLayersControl(
baseGroups = c("Topográfico", "Fotográfico"),
overlayGroups = c("Lugares", "Rutas"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# Añadir leyenda
addLegend(position = 'bottomright', pal=pal, values=~Tipo.de.valor, title="Tipo", opacity = 0.6)
# Imprimir el mapa
mapa
saveWidget(mapa, "mapa.html", selfcontained = FALSE)
saveWidget(mapa, "mapa/index.html", selfcontained = TRUE)
# Carga de los datos
library(RCurl)
library(yaml)
library(dplyr)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(rgdal)
baseurl <- "http://forosocialcriptana.github.io/catalogo/"
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data[["Tipo.de.valor"]] <- factor(data[["Tipo.de.valor"]])
# Obtención de rutas
ruta1 <- readOGR(dsn = "datos", layer = "ruta1")
# Función que obiene el nombre normalizado para una ficha de un lugar.
getName <- function (x) {
name <- gsub(" ", "-", tolower(iconv(x, to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
return(name)
}
# Transformación de las url de las fotos para tomarlas del catálogo en github
getUrlPhoto <- function (x) {
name <- ""
if (x[9]!="") {
name <- paste("https://forosocialcriptana.github.io/catalogo/img/small/", getName(x[2]), "-1.jpg", sep="")
}
return(name)
}
data[["Fotos"]] <- apply(data, 1, getUrlPhoto)
# Creación de una columna con los textos de los popups
data[["Popup"]] <- paste("<h3><a href=\"", baseurl, "lugares/", getName(data[["Título"]]), "/index.html\">", data[["Título"]], "</a></h3>\n\n<img src=\"", data[["Fotos"]], "\">\n\n<p>", data[["Descripción.breve"]], "</p>", sep="")
# Paleta de colores
#tmp <- factor(sample.int(4, nrow(data), TRUE))
pal <- colorFactor(c("#00FF00FF", "#FFFF00FF", "#FF0000FF", "#0000FFFF"), data[["Tipo.de.valor"]])
#colors <- colorFactor(terrain.colors(4), levels(data[["Tipo.de.valor"]]))
mapa <- leaflet(data=data) %>%
setView(lng = -3.0837, lat = 39.3343, zoom = 11) %>%
# Añadir capa de mapa base
addTiles("https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Topográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir capa de mapa ortofotográfico
addTiles("https://api.mapbox.com/styles/v1/forosocialcriptana/ciq96tnhl007zerm4k9idudqz/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Fotográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir marcadores de lugares
addCircleMarkers(lng=~Longitud, lat=~Latitud, popup=~Popup, color=~pal(Tipo.de.valor), opacity = 1, fillOpacity = 0.5, weight = 2, radius = 4, clusterOptions = markerClusterOptions(), group="Lugares") %>%
# Añadir rutas
addPolylines(data = ruta1, color = "purple", weight = 4, popup = "Ruta del Arroyo San Marcos", group="Rutas") %>%
hideGroup("Rutas") %>%
# Control de capas
addLayersControl(
baseGroups = c("Topográfico", "Fotográfico"),
overlayGroups = c("Lugares", "Rutas"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# Añadir leyenda
addLegend(position = 'bottomright', pal=pal, values=~Tipo.de.valor, title="Tipo", opacity = 0.6)
# Imprimir el mapa
mapa
saveWidget(mapa, "mapa/index.html", selfcontained = TRUE)
setwd("/media/alf/datos/web/catalogo-patrimonio/mapa")
saveWidget(mapa, "index.html", selfcontained = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
2:1
2::1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?seq()
seq(2,1)
seq(10)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x[-1]
x <- c(1)
x[-1]
length(x)>0
x <- c()
length(x)>0
length(x[-1])>0
x <- c(1)
length(x[-1])>0
x <- c(1,2)
length(x[-1])>0
for (i in length(x[-1]) {
print(i)
}
x <- c(1,2)
for (i in length(x[-1]) {
print(i)
}
x <- c(1,2)
for (i in 1:length(x[-1]) {
print(i)
}
x <- c(1,2)
for (i in 1:length(x[-1])) {
print(i)
}
x <- c(1)
for (i in 1:length(x[-1])) {
print(i)
}
x <- c(1)
for (i in 0:length(x[-1])) {
print(i)
}
x <- c(1)
for (i in seq_along(x[-1])) {
print(i)
}
x <- c(1)
for (i in seq_along(x[-1])) {
print(i)
}
x <- c(1,2)
for (i in seq_along(x[-1])) {
print(i)
}
x <- c(1,2,3,4)
for (i in seq_along(x[-1])) {
print(i)
}
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
library(RCurl)
library(rmarkdown)
library(yaml)
library(dplyr)
# Carga de los datos
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
library(RCurl)
library(rmarkdown)
library(yaml)
library(dplyr)
# Carga de los datos
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data <- data %>% arrange(Título)
View(data)
render.record <- function(x){
# Primero eliminar tildes, espacios y pasar a minuscula
name <- gsub(" ", "-", tolower(iconv(x[2], to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
file.name <- paste("lugares/", name, ".md", sep="")
file.create(file.name)
# Descargar fotos
url.photos <- trimws(unlist(strsplit(gsub("open\\?", "uc?export=download&", x[,9]), ",")))
photos <- NULL
if (length(url.photos)>0) {
for (i in 1:length(url.photos)) {
photos[i] <- paste("img/", name, "-", i, ".jpg", sep="")
download.file(url.photos[i], photos[i], method="wget", mode="w")
}
banner = photos[1]
} else {
banner="img/fondo-azul.png"
}
yamlheader <- as.yaml(list(layout="page", title=as.character(x[2]), "header-img"=paste("/", banner, sep=""), categories=as.character(x[7]), comments=as.character("true")))
write(paste("---\n", yamlheader,"---\n\n", sep=""), file=file.name, append=T)
write(unlist(x[6]), file=file.name, append=T)
if (length(photos)>0) {
write('\n<div id="myCarousel" class="carousel slide" data-ride="carousel">
<!-- Indicators -->
<ol class="carousel-indicators">
<li data-target="#myCarousel" data-slide-to="0" class="active"></li>',
file=file.name, append=T)
for (i in seq_along(photo[-1])) {
write(paste('<li data-target="#myCarousel" data-slide-to="', i, '"></li>', sep=""), file = file.name, append = T)
}
write('  </ol>
<!-- Wrapper for slides -->
<div class="carousel-inner" role="listbox">
<div class="item active">',
file = file.name, append=T)
write(paste('      <img src="{{ site.github.url }}/', photos[1], '" alt="', x[2], '">', sep=""), file = file.name, append = T)
write('    </div>', file= file.name, append = T)
for (i in photo[-1]) {
write('    <div class="item">', file= file.name, append = T)
write(paste('      <img src="{{ site.github.url }}/', i, '" alt="', x[2], '">', sep=""), file = file.name, append = T)
write('    </div>', file= file.name, append = T)
}
write('  <!-- Left and right controls -->
<a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
<span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
<span class="sr-only">Previous</span>
</a>
<a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
<span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
<span class="sr-only">Next</span>
</a>
</div>', file = file.name, append=T)
}
return(paste(name, ".md", sep=""))
}
render.record(data[8,])
x=data[8,]
name <- gsub(" ", "-", tolower(iconv(x[2], to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
file.name <- paste("lugares/", name, ".md", sep="")
file.create(file.name)
# Descargar fotos
url.photos <- trimws(unlist(strsplit(gsub("open\\?", "uc?export=download&", x[,9]), ",")))
photos <- NULL
if (length(url.photos)>0) {
for (i in 1:length(url.photos)) {
photos[i] <- paste("img/", name, "-", i, ".jpg", sep="")
download.file(url.photos[i], photos[i], method="wget", mode="w")
}
banner = photos[1]
} else {
banner="img/fondo-azul.png"
}
render.record <- function(x){
# Primero eliminar tildes, espacios y pasar a minuscula
name <- gsub(" ", "-", tolower(iconv(x[2], to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
file.name <- paste("lugares/", name, ".md", sep="")
file.create(file.name)
# Descargar fotos
url.photos <- trimws(unlist(strsplit(gsub("open\\?", "uc?export=download&", x[,9]), ",")))
photos <- NULL
if (length(url.photos)>0) {
for (i in 1:length(url.photos)) {
photos[i] <- paste("img/", name, "-", i, ".jpg", sep="")
download.file(url.photos[i], photos[i], method="wget", mode="w")
}
banner = photos[1]
} else {
banner="img/fondo-azul.png"
}
yamlheader <- as.yaml(list(layout="page", title=as.character(x[2]), "header-img"=paste("/", banner, sep=""), categories=as.character(x[7]), comments=as.character("true")))
write(paste("---\n", yamlheader,"---\n\n", sep=""), file=file.name, append=T)
write(unlist(x[6]), file=file.name, append=T)
if (length(photos)>0) {
write('\n<div id="myCarousel" class="carousel slide" data-ride="carousel">
<!-- Indicators -->
<ol class="carousel-indicators">
<li data-target="#myCarousel" data-slide-to="0" class="active"></li>',
file=file.name, append=T)
for (i in seq_along(photos[-1])) {
write(paste('<li data-target="#myCarousel" data-slide-to="', i, '"></li>', sep=""), file = file.name, append = T)
}
write('  </ol>
<!-- Wrapper for slides -->
<div class="carousel-inner" role="listbox">
<div class="item active">',
file = file.name, append=T)
write(paste('      <img src="{{ site.github.url }}/', photos[1], '" alt="', x[2], '">', sep=""), file = file.name, append = T)
write('    </div>', file= file.name, append = T)
for (i in photos[-1]) {
write('    <div class="item">', file= file.name, append = T)
write(paste('      <img src="{{ site.github.url }}/', i, '" alt="', x[2], '">', sep=""), file = file.name, append = T)
write('    </div>', file= file.name, append = T)
}
write('  <!-- Left and right controls -->
<a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
<span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
<span class="sr-only">Previous</span>
</a>
<a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
<span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
<span class="sr-only">Next</span>
</a>
</div>', file = file.name, append=T)
}
return(paste(name, ".md", sep=""))
}
render.record(data[8,])
source('/media/alf/datos/web/catalogo-patrimonio/generar_catalogo.R', echo=TRUE)
source('/media/alf/datos/web/catalogo-patrimonio/generar_catalogo.R', echo=TRUE)
source('/media/alf/datos/web/catalogo-patrimonio/generar_catalogo.R', echo=TRUE)
source('/media/alf/datos/web/catalogo-patrimonio/generar_catalogo.R', echo=TRUE)
# Carga de los datos
library(RCurl)
library(yaml)
library(dplyr)
library(leaflet)
library(htmltools)
library(htmlwidgets)
library(rgdal)
baseurl <- "http://forosocialcriptana.github.io/catalogo-patrimonio/"
url.data <- "https://docs.google.com/spreadsheets/d/1hWyDiPwVU1oUflqVSC6iSveP-NigMpZhh9e7RKXZpJk/pub?output=csv"
data <- read.csv(text = getURL(url.data, .encoding = "UTF-8"), encoding = "UTF-8", header = T, stringsAsFactors = F)
data[["Tipo.de.valor"]] <- factor(data[["Tipo.de.valor"]])
# Obtención de rutas
ruta1 <- readOGR(dsn = "datos", layer = "ruta1")
# Función que obiene el nombre normalizado para una ficha de un lugar.
getName <- function (x) {
name <- gsub(" ", "-", tolower(iconv(x, to='ASCII//TRANSLIT')))
name <- gsub("/", "-", name)
return(name)
}
# Transformación de las url de las fotos para tomarlas del catálogo en github
getUrlPhoto <- function (x) {
name <- ""
if (x[9]!="") {
name <- paste("https://forosocialcriptana.github.io/catalogo/img/small/", getName(x[2]), "-1.jpg", sep="")
}
return(name)
}
data[["Fotos"]] <- apply(data, 1, getUrlPhoto)
# Creación de una columna con los textos de los popups
data[["Popup"]] <- paste("<h3><a href=\"", baseurl, "lugares/", getName(data[["Título"]]), "/index.html\">", data[["Título"]], "</a></h3>\n\n<img src=\"", data[["Fotos"]], "\">\n\n<p>", data[["Descripción.breve"]], "</p>", sep="")
# Paleta de colores
#tmp <- factor(sample.int(4, nrow(data), TRUE))
pal <- colorFactor(c("#00FF00FF", "#FFFF00FF", "#FF0000FF", "#0000FFFF"), data[["Tipo.de.valor"]])
#colors <- colorFactor(terrain.colors(4), levels(data[["Tipo.de.valor"]]))
mapa <- leaflet(data=data) %>%
setView(lng = -3.0837, lat = 39.3343, zoom = 11) %>%
# Añadir capa de mapa base
addTiles("https://api.mapbox.com/styles/v1/mapbox/outdoors-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Topográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir capa de mapa ortofotográfico
addTiles("https://api.mapbox.com/styles/v1/forosocialcriptana/ciq96tnhl007zerm4k9idudqz/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZm9yb3NvY2lhbGNyaXB0YW5hIiwiYSI6ImJxdVlNV00ifQ.LRq3xNtoNg_WF1QBodWziA", group="Fotográfico", attribution = "<a href=\"http://forosocialcriptana.com\">Foro Social de Campo de Criptana</a>") %>%
# Añadir marcadores de lugares
addCircleMarkers(lng=~Longitud, lat=~Latitud, popup=~Popup, color=~pal(Tipo.de.valor), opacity = 1, fillOpacity = 0.5, weight = 2, radius = 4, clusterOptions = markerClusterOptions(), group="Lugares") %>%
# Añadir rutas
addPolylines(data = ruta1, color = "purple", weight = 4, popup = "Ruta del Arroyo San Marcos", group="Rutas") %>%
hideGroup("Rutas") %>%
# Control de capas
addLayersControl(
baseGroups = c("Topográfico", "Fotográfico"),
overlayGroups = c("Lugares", "Rutas"),
options = layersControlOptions(collapsed = TRUE)
) %>%
# Añadir leyenda
addLegend(position = 'bottomright', pal=pal, values=~Tipo.de.valor, title="Tipo", opacity = 0.6)
# Imprimir el mapa
mapa
saveWidget(mapa, "index.html", selfcontained = TRUE)
